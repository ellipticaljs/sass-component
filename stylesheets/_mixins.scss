@import "functions";

$grey: #ccc !default;
$off-white: #eee !default;
$component-hover-darken-factor: 4% !default;
$component-border-hover-darken-factor: 4% !default;
$component-box-shadow: rgba(0, 0, 0, .20) 0px 1px 1px !default;
$component-box-shadow-active: inset 0 3px 5px rgba(0, 0, 0, .175) !default;
$component-border: 1px solid !default;
$component-background-disabled: $off-white !default;
$component-font-color-disabled: darken($off-white, 5%) !default;
$component-border-disabled: 1px solid transparent !important !default;
$include-component-gradient: true !default;
$enforce-border-important : false !default;
$override-component-box-shadow: true !default;
$include-component-box-shadow: false !default;
$include-component-active-box-shadow: true !default;
$include-component-text-shadow: false !default;


/// @access private
/// @param {List} $direction (to bottom)
/// @param {List} $list (#fff,#f2f2f2)
@mixin _linear-gradient($direction:to bottom,$list:(#fff,#f2f2f2)){
  background-image: -webkit-linear-gradient($direction,$list);
  background-image: linear-gradient($direction,$list);
}


/// set a background value if passed value is color or string(e.g: none;transparent)
/// if force bit is set, will otherwise set to gray if passed val not color or string
/// @access private
/// @param {*} $color
/// @param {Boolean} $force
@mixin _background-color($color, $force: false) {
  @if type-of($color) == color or type-of($color) == string {
    background: $color;
  } @else {
    @if $force == true {
      background: $grey;
    }
  }
}

/// set a background color from a list
/// @access private
/// @param {*} $background
@mixin _background-color-from-gradient($background) {
  $_color: first($background);
  background: $_color;
}

/// darken a background color from a color input
/// @access private
/// @param {*} $color
/// @param {Boolean} $force
@mixin _darken-background-color($color, $force: false) {
  $_darken-factor: $component-hover-darken-factor;
  @if type-of($color) == color {
    background: darken($color, $_darken-factor);
  } @else {
    @if $force == true {
      background: darken($grey, $_darken-factor);
    }
  }
}

/// set a darkened background color from a list input
/// @access private
/// @param {*} $background
@mixin _darken-background-color-from-gradient($background) {
  $_color: first($background);
  @include _darken-background-color($_color, true);
}

/// darken a gradient background
/// @access private
/// @param {List} $list
/// @param {List} $direction
@mixin _darken-background-gradient($list, $direction) {
  $_darken-factor: $component-hover-darken-factor;
  $darken-gradient: darken-gradient($list, $_darken-factor);
  @include _linear-gradient($direction, $darken-gradient);
}

/// set a component background from a color or list/direction
/// if include-gradient flag is not set, a gradient list will be converted to a color
/// @access public
/// @param {List} $background
/// @param {List} $direction
@mixin component-background($background, $direction) {
  @if type-of($background) == list {
    @if $include-component-gradient == true {
      @include _linear-gradient($direction, $background);
    } @else {
      @include _background-color-from-gradient($background);
    }
  } @else {
    @include _background-color($background, false);
  }
}

/// set a component hover background by darkening a color or list/direction
/// if include-gradient flag is not set, a gradient list will be converted to a color
/// @access public
/// @param {*} $background
/// @param {List} $direction
@mixin component-background-hover($background, $direction) {
  @if type-of($background) == list {
    @if $include-component-gradient == true {
      @include _darken-background-gradient($background, $direction);
    } @else {
      @include _darken-background-color-from-gradient($background);
    }
  } @else {
    @include _darken-background-color($background, false);
  }
}


/// set a component border from a color or a list
/// @access public
/// @param {*} $border
@mixin component-border($border) {
  $_enforce-important: $enforce-border-important;
  $_component-border: $component-border;
  @if type-of($border) == color {
    border: $_component-border;
    @if $_enforce-important==true {
      border-color: $border !important;
    } @else {
      border-color: $border;
    }
  } @else if type-of($border) == list {
    @if list-has-number($border) {
      @if $_enforce-important==true {
        border: $border !important;
      } @else {
        border: $border;
      }
    } @else {
      border: $_component-border;
      @if $_enforce-important==true {
        border-color: $border !important;
      } @else {
        border-color: $border;
      }
    }
  } @else {
    border: none;
  }
}

/// set a component hover border by darkening a color or a list
/// @access public
/// @param {*} $border
@mixin component-border-hover($border) {
  $_enforce-important: $enforce-border-important;
  $_darkenFactor: $component-hover-darken-factor;
  $_component-border: $component-border;
  @if type-of($border) == list {
    @if list-has-number($border) {
      @if $_enforce-important==true {
        border: $border !important;
      } @else {
        border: $border;
      }
    } @else {
      border: $_component-border;
      @if $_enforce-important==true {
        border-color: darken-rule($border, $_darkenFactor) !important;
      } @else {
        border-color: darken-rule($border, $_darkenFactor);
      }
    }
  } @else if type-of($border) == color {
    @if $_enforce-important==true {
      border: $_component-border !important;
      border-color: darken-rule($border, $_darkenFactor) !important;
    } @else {
      border: $_component-border;
      border-color: darken-rule($border, $_darkenFactor);
    }
  } @else {
    border: none;
  }
}

/// set a component box-shadow
/// @access public
@mixin component-box-shadow($box-shadow) {
  $_override:$override-component-box-shadow;
  @if $include-component-box-shadow == true {
    @if $box-shadow == null {
      box-shadow: $component-box-shadow;
    } @else if type-of($box-shadow) == list {
      box-shadow: $box-shadow;
    } @else {
      box-shadow: none;
    }
  } @else if $_override==true {
    @if type-of($box-shadow) ==list {
      box-shadow: $box-shadow;
    } @else {
      box-shadow: none;
    }
  }

}

/// set box-shadow from settings for active if flag is true
/// @access public
@mixin component-box-shadow-active() {
  @if $include-component-active-box-shadow ==true {
    box-shadow: $component-box-shadow-active;
  } @else {
    box-shadow: none;
  }
}

/// set a component font
/// @access public
/// @param {*} $color
/// @param {*} $text-shadow
@mixin component-font($color: null, $text-shadow: null) {
  @if type-of($color) == color {
    color: $color;
    //opacity: 1;
  } @else if type-of($color) == number {
    opacity: $color;
  }
  @if type-of($text-shadow) == list {
    @if $include-component-text-shadow == true {
      text-shadow: $text-shadow;
    } @else {
      text-shadow: none; //explicitly set text-shadow to avoid css-component inheriting another's text-shadow;
    }
  } @else {
    text-shadow: none; //explicitly set text-shadow to avoid unexpected inheritance
  }
}

/// set an extended component font
/// @access public
/// @param {*} $color
/// @param {*} $text-shadow
@mixin component-font-extended($color: null, $text-shadow: null) {
  @if type-of($color) == color {
    color: $color;
  } @else if type-of($color) == number {
    opacity: $color;
  }
  @if type-of($text-shadow) == list {
    @if $include-component-text-shadow == true {
      text-shadow: $text-shadow;
    } @else {
      text-shadow: none;
    }
  } @else {
    @if type-of($text-shadow) == string {
      text-shadow: $text-shadow;
    }
  }
}

/// set component font for hover and active
/// @access public
/// @param {*} $color
/// @param {*} $text-shadow
@mixin component-font-hover($color: null, $text-shadow: null) {
  @if type-of($color) == color {
    color: $color;
  } @else if type-of($color) == number {
    opacity: $color;
  }

  @if type-of($text-shadow) == list {
    @if $include-component-text-shadow == true {
      text-shadow: $text-shadow;
    }
  }
}

/// set a component placeholder
/// @access public
/// @param {String} $color
@mixin component-placeholder($color: null) {
  &::-webkit-input-placeholder {
    color: $color !important;
  }
  &::-moz-placeholder {
    color: $color !important;
  }
  &::-o-placeholder {
    color: $color !important;
  }
  &:-ms-input-placeholder {
    color: $color !important;
  }
}

/// disabled component
/// @access public
/// @param {*} $background-disabled
/// @param {*} $font-color-disabled
/// @param {*} $background
@mixin component-disabled($background-disabled, $font-color-disabled, $background) {
  @if not(type-of($background-disabled) == color or type-of($background-disabled) == list or $background-disabled == none) {
    @if not(type-of($background) ==color or type-of($background) == list) {
      $background-disabled: none;
    } @else {
      $background-disabled: $component-background-disabled;
    }
  }

  @if type-of($font-color-disabled) != color {
    $font-color-disabled: $component-font-color-disabled;
  }

  background: $background-disabled !important;
  text-shadow: none !important;
  outline: none !important;
  box-shadow: none !important;
  border: $component-border-disabled;
  cursor: default !important;
  color: $font-color-disabled !important;
  &:after {
    background: none !important;
    color: $font-color-disabled !important;
  }
  &:before {
    background: none !important;
    color: $font-color-disabled !important;
  }
  @include component-placeholder($font-color-disabled);
}



